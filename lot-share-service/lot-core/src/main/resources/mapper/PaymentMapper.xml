<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
Invalid bound statement (not found)错误的可能原因
    https://www.cnblogs.com/liaojie970/p/8034525.html
-->
<mapper namespace="space.qmen.lot.dao.PaymentDao">

    <!--
        支付宝
    -->
    <resultMap id="AliBaseResultMap" type="space.qmen.lot.entity.PayAli">
        <result column="id" property="id" />
        <result column="account_alipay_id" property="accountAlipayId" />
        <result column="f_user_id" property="fUserId" />
        <result column="tel" property="tel" />
        <result column="auth_password" property="authPassword" />
        <result column="password_salt" property="passwordSalt" />
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
        <result column="status" property="status" />
    </resultMap>

    <parameterMap id="PayAli" type="space.qmen.lot.entity.PayAli"/>
    <sql id="Ali_Base_Column_List">
        id,
        account_alipay_id, f_user_id,
        tel,
        /*auth_password, password_salt,*/
        gmt_create, gmt_modified,
        status
    </sql>


    <!-- 根据id获取支付宝账号 -->
    <select id="getPayAliById" resultMap="AliBaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Ali_Base_Column_List" />
        from pay_ali
        where id = #{id}
    </select>

    <!-- 显示所有支付宝账号 -->
    <select id="listPayAli" resultMap="AliBaseResultMap">
        select
        <include refid="Ali_Base_Column_List" />
        from pay_ali
    </select>

    <!-- 新增支付宝账号 -->
    <insert id="savePayAli" parameterMap="PayAli" useGeneratedKeys="true" keyProperty="id">
        insert into
        pay_ali(id, account_alipay_id, f_user_id, tel, auth_password, status)
        values
        (null,#{accountAlipayId},#{fUserId},#{tel},#{authPassword},#{status})
    </insert>

    <!--更新支付宝账号信息-->
    <update id="updatePayAli" parameterMap="PayAli">
        update
        pay_ali
        set
        <if test="tel!=null">
            tel = #{tel},
        </if>
        gmt_modified = CURRENT_TIMESTAMP
        where
        id = #{id}
    </update>

    <!-- 删除支付宝账号 -->
    <delete id="deletePayAli" parameterType="java.lang.Long">
        delete from
        pay_ali
        where
        id = #{id}
    </delete>


    <!--
        微信支付
    -->
    <resultMap id="WechatBaseResultMap" type="space.qmen.lot.entity.PayWechat">
        <result column="id" property="id" />
        <result column="account_wechat_id" property="accountWechatId" />
        <result column="f_user_id" property="fUserId" />
        <result column="tel" property="tel" />
        <result column="auth_password" property="authPassword" />
        <result column="password_salt" property="passwordSalt" />
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
        <result column="status" property="status" />
    </resultMap>

    <parameterMap id="PayWechat" type="space.qmen.lot.entity.PayWechat"/>
    <sql id="Wechat_Base_Column_List">
        id,
        account_wechat_id, f_user_id,
        tel,
        /*auth_password, password_salt,*/
        gmt_create, gmt_modified,
        status
    </sql>


    <!-- 根据id获取微信账号 -->
    <select id="getPayWechatById" resultMap="WechatBaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Wechat_Base_Column_List" />
        from pay_wechat
        where id = #{id}
    </select>

    <!-- 显示所有微信账号 -->
    <select id="listPayWechat" resultMap="WechatBaseResultMap">
        select
        <include refid="Wechat_Base_Column_List" />
        from pay_wechat
    </select>

    <!-- 新增微信账号 -->
    <insert id="savePayWechat" parameterMap="PayWechat" useGeneratedKeys="true" keyProperty="id">
        insert into
        pay_wechat(id, account_wechat_id, f_user_id, tel, auth_password, status)
        values
        (null,#{accountWechatId},#{fUserId},#{tel},#{authPassword},#{status})
    </insert>

    <!--更新微信账号信息-->
    <update id="updatePayWechat" parameterMap="PayWechat">
        update
        pay_wechat
        set
        <if test="tel!=null">
            tel = #{tel},
        </if>
        gmt_modified = CURRENT_TIMESTAMP
        where
        id = #{id}
    </update>

    <!-- 删除微信账号 -->
    <delete id="deletePayWechat" parameterType="java.lang.Long">
        delete from
        pay_wechat
        where
        id = #{id}
    </delete>


    <!--
        银行卡
    -->
    <resultMap id="BankBaseResultMap" type="space.qmen.lot.entity.PayBank">
        <result column="id" property="id" />
        <result column="account_bank_id" property="accountBankId" />
        <result column="f_user_id" property="fUserId" />
        <result column="bank_code" property="bankCode" />
        <result column="bank_name" property="bankName" />
        <result column="id_card" property="idCard" />
        <result column="tel" property="tel" />
        <result column="auth_password" property="authPassword" />
        <result column="password_salt" property="passwordSalt" />
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
        <result column="status" property="status" />
    </resultMap>

    <parameterMap id="PayBank" type="space.qmen.lot.entity.PayBank"/>
    <sql id="Bank_Base_Column_List">
        id,
        account_bank_id, f_user_id,
        bank_code, bank_name, id_card,
        tel,
        /*auth_password, password_salt,*/
        gmt_create, gmt_modified,
        status
    </sql>


    <!-- 根据id获取银行账号 -->
    <select id="getPayBankById" resultMap="BankBaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Bank_Base_Column_List" />
        from pay_bank
        where id = #{id}
    </select>

    <!-- 显示所有银行账号 -->
    <select id="listPayBank" resultMap="BankBaseResultMap">
        select
        <include refid="Bank_Base_Column_List" />
        from pay_bank
    </select>

    <!-- 新增银行账号 -->
    <insert id="savePayBank" parameterMap="PayBank" useGeneratedKeys="true" keyProperty="id">
        insert into
        pay_bank(id, account_bank_id, f_user_id,
          bank_code, bank_name, id_card,
          tel,
          auth_password,
          status)
        values
        (null,#{accountBankId},#{fUserId},
        #{banCode}, #{bankName}, #{idCard},
        #{tel},
        #{authPassword},
        #{status})
    </insert>

    <!--更新银行账号信息-->
    <update id="updatePayBank" parameterMap="PayBank">
        update
        pay_bank
        set
        <if test="bankCode!=null">
            bank_code = #{bankCode},
        </if>
        <if test="bankName!=null">
            bank_name = #{bankName},
        </if>
        <if test="idCard!=null">
            id_card = #{idCard},
        </if>
        <if test="tel!=null">
            tel = #{tel},
        </if>
        gmt_modified = CURRENT_TIMESTAMP
        where
        id = #{id}
    </update>

    <!-- 删除银行账号 -->
    <update id="deletePayBank" parameterType="java.lang.Long">
        update pay_bank
        set is_deleted = 1
        where
        id = #{id}
    </update>


</mapper>
